// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hnsw.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LevelCount struct {
	Level int64 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	Count int64 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *LevelCount) Reset()                    { *m = LevelCount{} }
func (m *LevelCount) String() string            { return proto.CompactTextString(m) }
func (*LevelCount) ProtoMessage()               {}
func (*LevelCount) Descriptor() ([]byte, []int) { return fileDescriptorHnsw, []int{0} }

func (m *LevelCount) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LevelCount) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Link struct {
	Level int64  `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	Id    uint64 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptorHnsw, []int{1} }

func (m *Link) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Link) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Node struct {
	Id      uint64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Vector  []float32 `protobuf:"fixed32,2,rep,packed,name=Vector" json:"Vector,omitempty"`
	Level   int64     `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	Friends []*Link   `protobuf:"bytes,4,rep,name=Friends" json:"Friends,omitempty"`
	Reverse []*Link   `protobuf:"bytes,5,rep,name=Reverse" json:"Reverse,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorHnsw, []int{2} }

func (m *Node) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetVector() []float32 {
	if m != nil {
		return m.Vector
	}
	return nil
}

func (m *Node) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Node) GetFriends() []*Link {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *Node) GetReverse() []*Link {
	if m != nil {
		return m.Reverse
	}
	return nil
}

type Hnsw struct {
	M              int64         `protobuf:"varint,1,opt,name=M,proto3" json:"M,omitempty"`
	M0             int64         `protobuf:"varint,2,opt,name=M0,proto3" json:"M0,omitempty"`
	EfConstruction int64         `protobuf:"varint,3,opt,name=EfConstruction,proto3" json:"EfConstruction,omitempty"`
	DelaunayType   int64         `protobuf:"varint,4,opt,name=DelaunayType,proto3" json:"DelaunayType,omitempty"`
	LevelMult      float32       `protobuf:"fixed32,5,opt,name=LevelMult,proto3" json:"LevelMult,omitempty"`
	MaxLayer       int64         `protobuf:"varint,6,opt,name=MaxLayer,proto3" json:"MaxLayer,omitempty"`
	Sequence       int64         `protobuf:"varint,7,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	CountLevel     []*LevelCount `protobuf:"bytes,8,rep,name=CountLevel" json:"CountLevel,omitempty"`
	EnterPoint     uint64        `protobuf:"varint,9,opt,name=EnterPoint,proto3" json:"EnterPoint,omitempty"`
	Nodes          []*Node       `protobuf:"bytes,10,rep,name=Nodes" json:"Nodes,omitempty"`
}

func (m *Hnsw) Reset()                    { *m = Hnsw{} }
func (m *Hnsw) String() string            { return proto.CompactTextString(m) }
func (*Hnsw) ProtoMessage()               {}
func (*Hnsw) Descriptor() ([]byte, []int) { return fileDescriptorHnsw, []int{3} }

func (m *Hnsw) GetM() int64 {
	if m != nil {
		return m.M
	}
	return 0
}

func (m *Hnsw) GetM0() int64 {
	if m != nil {
		return m.M0
	}
	return 0
}

func (m *Hnsw) GetEfConstruction() int64 {
	if m != nil {
		return m.EfConstruction
	}
	return 0
}

func (m *Hnsw) GetDelaunayType() int64 {
	if m != nil {
		return m.DelaunayType
	}
	return 0
}

func (m *Hnsw) GetLevelMult() float32 {
	if m != nil {
		return m.LevelMult
	}
	return 0
}

func (m *Hnsw) GetMaxLayer() int64 {
	if m != nil {
		return m.MaxLayer
	}
	return 0
}

func (m *Hnsw) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Hnsw) GetCountLevel() []*LevelCount {
	if m != nil {
		return m.CountLevel
	}
	return nil
}

func (m *Hnsw) GetEnterPoint() uint64 {
	if m != nil {
		return m.EnterPoint
	}
	return 0
}

func (m *Hnsw) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*LevelCount)(nil), "framework.LevelCount")
	proto.RegisterType((*Link)(nil), "framework.Link")
	proto.RegisterType((*Node)(nil), "framework.Node")
	proto.RegisterType((*Hnsw)(nil), "framework.Hnsw")
}
func (this *LevelCount) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LevelCount)
	if !ok {
		that2, ok := that.(LevelCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Link) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Link)
	if !ok {
		that2, ok := that.(Link)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Node) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Vector) != len(that1.Vector) {
		return false
	}
	for i := range this.Vector {
		if this.Vector[i] != that1.Vector[i] {
			return false
		}
	}
	if this.Level != that1.Level {
		return false
	}
	if len(this.Friends) != len(that1.Friends) {
		return false
	}
	for i := range this.Friends {
		if !this.Friends[i].Equal(that1.Friends[i]) {
			return false
		}
	}
	if len(this.Reverse) != len(that1.Reverse) {
		return false
	}
	for i := range this.Reverse {
		if !this.Reverse[i].Equal(that1.Reverse[i]) {
			return false
		}
	}
	return true
}
func (this *Hnsw) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Hnsw)
	if !ok {
		that2, ok := that.(Hnsw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.M != that1.M {
		return false
	}
	if this.M0 != that1.M0 {
		return false
	}
	if this.EfConstruction != that1.EfConstruction {
		return false
	}
	if this.DelaunayType != that1.DelaunayType {
		return false
	}
	if this.LevelMult != that1.LevelMult {
		return false
	}
	if this.MaxLayer != that1.MaxLayer {
		return false
	}
	if this.Sequence != that1.Sequence {
		return false
	}
	if len(this.CountLevel) != len(that1.CountLevel) {
		return false
	}
	for i := range this.CountLevel {
		if !this.CountLevel[i].Equal(that1.CountLevel[i]) {
			return false
		}
	}
	if this.EnterPoint != that1.EnterPoint {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *LevelCount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.LevelCount{")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Link) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.Link{")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&framework.Node{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Vector: "+fmt.Sprintf("%#v", this.Vector)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	if this.Friends != nil {
		s = append(s, "Friends: "+fmt.Sprintf("%#v", this.Friends)+",\n")
	}
	if this.Reverse != nil {
		s = append(s, "Reverse: "+fmt.Sprintf("%#v", this.Reverse)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Hnsw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&framework.Hnsw{")
	s = append(s, "M: "+fmt.Sprintf("%#v", this.M)+",\n")
	s = append(s, "M0: "+fmt.Sprintf("%#v", this.M0)+",\n")
	s = append(s, "EfConstruction: "+fmt.Sprintf("%#v", this.EfConstruction)+",\n")
	s = append(s, "DelaunayType: "+fmt.Sprintf("%#v", this.DelaunayType)+",\n")
	s = append(s, "LevelMult: "+fmt.Sprintf("%#v", this.LevelMult)+",\n")
	s = append(s, "MaxLayer: "+fmt.Sprintf("%#v", this.MaxLayer)+",\n")
	s = append(s, "Sequence: "+fmt.Sprintf("%#v", this.Sequence)+",\n")
	if this.CountLevel != nil {
		s = append(s, "CountLevel: "+fmt.Sprintf("%#v", this.CountLevel)+",\n")
	}
	s = append(s, "EnterPoint: "+fmt.Sprintf("%#v", this.EnterPoint)+",\n")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHnsw(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LevelCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Level))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Link) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Level))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Id))
	}
	if len(m.Vector) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(len(m.Vector)*4))
		for _, num := range m.Vector {
			f1 := math.Float32bits(float32(num))
			dAtA[i] = uint8(f1)
			i++
			dAtA[i] = uint8(f1 >> 8)
			i++
			dAtA[i] = uint8(f1 >> 16)
			i++
			dAtA[i] = uint8(f1 >> 24)
			i++
		}
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Level))
	}
	if len(m.Friends) > 0 {
		for _, msg := range m.Friends {
			dAtA[i] = 0x22
			i++
			i = encodeVarintHnsw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Reverse) > 0 {
		for _, msg := range m.Reverse {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintHnsw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Hnsw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hnsw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.M != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.M))
	}
	if m.M0 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.M0))
	}
	if m.EfConstruction != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.EfConstruction))
	}
	if m.DelaunayType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.DelaunayType))
	}
	if m.LevelMult != 0 {
		dAtA[i] = 0x2d
		i++
		i = encodeFixed32Hnsw(dAtA, i, uint32(math.Float32bits(float32(m.LevelMult))))
	}
	if m.MaxLayer != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.MaxLayer))
	}
	if m.Sequence != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Sequence))
	}
	if len(m.CountLevel) > 0 {
		for _, msg := range m.CountLevel {
			dAtA[i] = 0x42
			i++
			i = encodeVarintHnsw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.EnterPoint != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.EnterPoint))
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x52
			i++
			i = encodeVarintHnsw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Hnsw(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Hnsw(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHnsw(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LevelCount) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovHnsw(uint64(m.Level))
	}
	if m.Count != 0 {
		n += 1 + sovHnsw(uint64(m.Count))
	}
	return n
}

func (m *Link) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovHnsw(uint64(m.Level))
	}
	if m.Id != 0 {
		n += 1 + sovHnsw(uint64(m.Id))
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHnsw(uint64(m.Id))
	}
	if len(m.Vector) > 0 {
		n += 1 + sovHnsw(uint64(len(m.Vector)*4)) + len(m.Vector)*4
	}
	if m.Level != 0 {
		n += 1 + sovHnsw(uint64(m.Level))
	}
	if len(m.Friends) > 0 {
		for _, e := range m.Friends {
			l = e.Size()
			n += 1 + l + sovHnsw(uint64(l))
		}
	}
	if len(m.Reverse) > 0 {
		for _, e := range m.Reverse {
			l = e.Size()
			n += 1 + l + sovHnsw(uint64(l))
		}
	}
	return n
}

func (m *Hnsw) Size() (n int) {
	var l int
	_ = l
	if m.M != 0 {
		n += 1 + sovHnsw(uint64(m.M))
	}
	if m.M0 != 0 {
		n += 1 + sovHnsw(uint64(m.M0))
	}
	if m.EfConstruction != 0 {
		n += 1 + sovHnsw(uint64(m.EfConstruction))
	}
	if m.DelaunayType != 0 {
		n += 1 + sovHnsw(uint64(m.DelaunayType))
	}
	if m.LevelMult != 0 {
		n += 5
	}
	if m.MaxLayer != 0 {
		n += 1 + sovHnsw(uint64(m.MaxLayer))
	}
	if m.Sequence != 0 {
		n += 1 + sovHnsw(uint64(m.Sequence))
	}
	if len(m.CountLevel) > 0 {
		for _, e := range m.CountLevel {
			l = e.Size()
			n += 1 + l + sovHnsw(uint64(l))
		}
	}
	if m.EnterPoint != 0 {
		n += 1 + sovHnsw(uint64(m.EnterPoint))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovHnsw(uint64(l))
		}
	}
	return n
}

func sovHnsw(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHnsw(x uint64) (n int) {
	return sovHnsw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LevelCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHnsw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHnsw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHnsw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Link) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHnsw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHnsw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHnsw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHnsw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				v2 := float32(math.Float32frombits(v))
				m.Vector = append(m.Vector, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHnsw
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					v2 := float32(math.Float32frombits(v))
					m.Vector = append(m.Vector, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHnsw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friends = append(m.Friends, &Link{})
			if err := m.Friends[len(m.Friends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reverse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHnsw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reverse = append(m.Reverse, &Link{})
			if err := m.Reverse[len(m.Reverse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHnsw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHnsw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hnsw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHnsw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hnsw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hnsw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			m.M = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.M |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field M0", wireType)
			}
			m.M0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.M0 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EfConstruction", wireType)
			}
			m.EfConstruction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EfConstruction |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelaunayType", wireType)
			}
			m.DelaunayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelaunayType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelMult", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.LevelMult = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLayer", wireType)
			}
			m.MaxLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLayer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHnsw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountLevel = append(m.CountLevel, &LevelCount{})
			if err := m.CountLevel[len(m.CountLevel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterPoint", wireType)
			}
			m.EnterPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnterPoint |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHnsw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHnsw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHnsw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHnsw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHnsw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHnsw
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHnsw(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHnsw = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHnsw   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("hnsw.proto", fileDescriptorHnsw) }

var fileDescriptorHnsw = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0x76, 0x26, 0x49, 0x77, 0x7b, 0x5c, 0x56, 0x18, 0x54, 0x86, 0x45, 0x42, 0x08, 0x28, 0x11,
	0x34, 0xbb, 0x28, 0x82, 0xd7, 0xae, 0x2b, 0x2e, 0x34, 0x22, 0xa3, 0x78, 0x9f, 0x26, 0xa7, 0xdd,
	0xb0, 0xdd, 0x99, 0x3a, 0x99, 0xb4, 0xf6, 0x2d, 0xbc, 0xf6, 0x09, 0x7c, 0x10, 0x2f, 0xbc, 0xf4,
	0x11, 0x34, 0xbe, 0x80, 0x8f, 0x20, 0x99, 0xa4, 0x6d, 0x74, 0xe9, 0x5d, 0xbe, 0x9f, 0x33, 0x9c,
	0xef, 0x7c, 0x01, 0xb8, 0x90, 0xe5, 0x32, 0x9e, 0x6b, 0x65, 0x14, 0x1b, 0x4e, 0x74, 0x7a, 0x85,
	0x4b, 0xa5, 0x2f, 0x8f, 0x1e, 0x4f, 0x0b, 0x73, 0x51, 0x8d, 0xe3, 0x4c, 0x5d, 0x1d, 0x4f, 0xd5,
	0x54, 0x1d, 0x5b, 0xc7, 0xb8, 0x9a, 0x58, 0x64, 0x81, 0xfd, 0x6a, 0x27, 0xc3, 0xe7, 0x00, 0x23,
	0x5c, 0xe0, 0xec, 0x54, 0x55, 0xd2, 0xb0, 0xdb, 0xe0, 0x59, 0xc4, 0x49, 0x40, 0x22, 0x47, 0xb4,
	0xa0, 0x61, 0xad, 0xcc, 0x69, 0xcb, 0x5a, 0x10, 0x3e, 0x02, 0x77, 0x54, 0xc8, 0xcb, 0x1d, 0x33,
	0x87, 0x40, 0xcf, 0x73, 0x3b, 0xe0, 0x0a, 0x7a, 0x9e, 0x87, 0x5f, 0x08, 0xb8, 0x6f, 0x54, 0x8e,
	0x9d, 0x40, 0xd6, 0x02, 0xbb, 0x0b, 0x83, 0x0f, 0x98, 0x19, 0xa5, 0x39, 0x0d, 0x9c, 0x88, 0x8a,
	0x0e, 0x6d, 0x9f, 0x75, 0xfa, 0xcf, 0x3e, 0x84, 0xbd, 0x57, 0xba, 0x40, 0x99, 0x97, 0xdc, 0x0d,
	0x9c, 0xe8, 0xe6, 0x93, 0x5b, 0xf1, 0x26, 0x7a, 0xdc, 0xac, 0x23, 0xd6, 0x7a, 0x63, 0x15, 0xb8,
	0x40, 0x5d, 0x22, 0xf7, 0x76, 0x58, 0x3b, 0x3d, 0xfc, 0x46, 0xc1, 0x7d, 0x2d, 0xcb, 0x25, 0x3b,
	0x00, 0x92, 0x74, 0x39, 0x48, 0xd2, 0xac, 0x9a, 0x9c, 0x74, 0xa1, 0x69, 0x72, 0xc2, 0x1e, 0xc0,
	0xe1, 0xd9, 0xe4, 0x54, 0xc9, 0xd2, 0xe8, 0x2a, 0x33, 0x85, 0x92, 0xdd, 0x6e, 0xff, 0xb1, 0x2c,
	0x84, 0x83, 0x97, 0x38, 0x4b, 0x2b, 0x99, 0xae, 0xde, 0xaf, 0xe6, 0xc8, 0x5d, 0xeb, 0xfa, 0x87,
	0x63, 0xf7, 0x60, 0x68, 0x13, 0x25, 0xd5, 0xcc, 0x70, 0x2f, 0x20, 0x11, 0x15, 0x5b, 0x82, 0x1d,
	0xc1, 0x7e, 0x92, 0x7e, 0x1a, 0xa5, 0x2b, 0xd4, 0x7c, 0x60, 0xa7, 0x37, 0xb8, 0xd1, 0xde, 0xe1,
	0xc7, 0x0a, 0x65, 0x86, 0x7c, 0xaf, 0xd5, 0xd6, 0x98, 0x3d, 0x03, 0xb0, 0xe5, 0xb4, 0x97, 0xdb,
	0xb7, 0xb1, 0xef, 0xf4, 0x63, 0x6f, 0xaa, 0x16, 0x3d, 0x23, 0xf3, 0x01, 0xce, 0xa4, 0x41, 0xfd,
	0x56, 0x15, 0xd2, 0xf0, 0xa1, 0xed, 0xa6, 0xc7, 0xb0, 0xfb, 0xe0, 0x35, 0xdd, 0x95, 0x1c, 0xae,
	0x1d, 0xb2, 0xe1, 0x45, 0xab, 0xbe, 0xe0, 0x7f, 0x7e, 0xf9, 0xe4, 0x6b, 0xed, 0x93, 0xef, 0xb5,
	0x4f, 0x7e, 0xd4, 0x3e, 0xf9, 0x59, 0xfb, 0xe4, 0xf3, 0x6f, 0xff, 0xc6, 0x78, 0x60, 0x7f, 0xb6,
	0xa7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xb7, 0xaa, 0x04, 0xb4, 0x02, 0x00, 0x00,
}
