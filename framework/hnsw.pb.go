// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hnsw.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LinkMap struct {
	Nodes map[uint64]bool `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *LinkMap) Reset()                    { *m = LinkMap{} }
func (m *LinkMap) String() string            { return proto.CompactTextString(m) }
func (*LinkMap) ProtoMessage()               {}
func (*LinkMap) Descriptor() ([]byte, []int) { return fileDescriptorHnsw, []int{0} }

func (m *LinkMap) GetNodes() map[uint64]bool {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type LinkList struct {
	Nodes []uint64 `protobuf:"varint,1,rep,packed,name=Nodes" json:"Nodes,omitempty"`
}

func (m *LinkList) Reset()                    { *m = LinkList{} }
func (m *LinkList) String() string            { return proto.CompactTextString(m) }
func (*LinkList) ProtoMessage()               {}
func (*LinkList) Descriptor() ([]byte, []int) { return fileDescriptorHnsw, []int{1} }

func (m *LinkList) GetNodes() []uint64 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Node struct {
	P              []float32            `protobuf:"fixed32,1,rep,packed,name=P" json:"P,omitempty"`
	Level          uint64               `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	Friends        map[uint64]*LinkList `protobuf:"bytes,3,rep,name=Friends" json:"Friends,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	ReverseFriends map[uint64]*LinkMap  `protobuf:"bytes,4,rep,name=ReverseFriends" json:"ReverseFriends,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Id             uint64               `protobuf:"varint,5,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorHnsw, []int{2} }

func (m *Node) GetP() []float32 {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *Node) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Node) GetFriends() map[uint64]*LinkList {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *Node) GetReverseFriends() map[uint64]*LinkMap {
	if m != nil {
		return m.ReverseFriends
	}
	return nil
}

func (m *Node) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Hnsw struct {
	M              uint64            `protobuf:"varint,1,opt,name=M,proto3" json:"M,omitempty"`
	M0             uint64            `protobuf:"varint,2,opt,name=M0,proto3" json:"M0,omitempty"`
	EfConstruction uint64            `protobuf:"varint,3,opt,name=EfConstruction,proto3" json:"EfConstruction,omitempty"`
	DelaunayType   uint64            `protobuf:"varint,4,opt,name=DelaunayType,proto3" json:"DelaunayType,omitempty"`
	LevelMult      float64           `protobuf:"fixed64,5,opt,name=LevelMult,proto3" json:"LevelMult,omitempty"`
	MaxLayer       uint64            `protobuf:"varint,6,opt,name=MaxLayer,proto3" json:"MaxLayer,omitempty"`
	Sequence       uint64            `protobuf:"varint,7,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	CountLevel     map[uint64]uint64 `protobuf:"bytes,8,rep,name=CountLevel" json:"CountLevel,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Enterpoint     uint64            `protobuf:"varint,9,opt,name=Enterpoint,proto3" json:"Enterpoint,omitempty"`
	Nodes          map[uint64]*Node  `protobuf:"bytes,10,rep,name=Nodes" json:"Nodes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Hnsw) Reset()                    { *m = Hnsw{} }
func (m *Hnsw) String() string            { return proto.CompactTextString(m) }
func (*Hnsw) ProtoMessage()               {}
func (*Hnsw) Descriptor() ([]byte, []int) { return fileDescriptorHnsw, []int{3} }

func (m *Hnsw) GetM() uint64 {
	if m != nil {
		return m.M
	}
	return 0
}

func (m *Hnsw) GetM0() uint64 {
	if m != nil {
		return m.M0
	}
	return 0
}

func (m *Hnsw) GetEfConstruction() uint64 {
	if m != nil {
		return m.EfConstruction
	}
	return 0
}

func (m *Hnsw) GetDelaunayType() uint64 {
	if m != nil {
		return m.DelaunayType
	}
	return 0
}

func (m *Hnsw) GetLevelMult() float64 {
	if m != nil {
		return m.LevelMult
	}
	return 0
}

func (m *Hnsw) GetMaxLayer() uint64 {
	if m != nil {
		return m.MaxLayer
	}
	return 0
}

func (m *Hnsw) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Hnsw) GetCountLevel() map[uint64]uint64 {
	if m != nil {
		return m.CountLevel
	}
	return nil
}

func (m *Hnsw) GetEnterpoint() uint64 {
	if m != nil {
		return m.Enterpoint
	}
	return 0
}

func (m *Hnsw) GetNodes() map[uint64]*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*LinkMap)(nil), "framework.LinkMap")
	proto.RegisterType((*LinkList)(nil), "framework.LinkList")
	proto.RegisterType((*Node)(nil), "framework.Node")
	proto.RegisterType((*Hnsw)(nil), "framework.Hnsw")
}
func (this *LinkMap) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinkMap)
	if !ok {
		that2, ok := that.(LinkMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if this.Nodes[i] != that1.Nodes[i] {
			return false
		}
	}
	return true
}
func (this *LinkList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinkList)
	if !ok {
		that2, ok := that.(LinkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if this.Nodes[i] != that1.Nodes[i] {
			return false
		}
	}
	return true
}
func (this *Node) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.P) != len(that1.P) {
		return false
	}
	for i := range this.P {
		if this.P[i] != that1.P[i] {
			return false
		}
	}
	if this.Level != that1.Level {
		return false
	}
	if len(this.Friends) != len(that1.Friends) {
		return false
	}
	for i := range this.Friends {
		if !this.Friends[i].Equal(that1.Friends[i]) {
			return false
		}
	}
	if len(this.ReverseFriends) != len(that1.ReverseFriends) {
		return false
	}
	for i := range this.ReverseFriends {
		if !this.ReverseFriends[i].Equal(that1.ReverseFriends[i]) {
			return false
		}
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Hnsw) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Hnsw)
	if !ok {
		that2, ok := that.(Hnsw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.M != that1.M {
		return false
	}
	if this.M0 != that1.M0 {
		return false
	}
	if this.EfConstruction != that1.EfConstruction {
		return false
	}
	if this.DelaunayType != that1.DelaunayType {
		return false
	}
	if this.LevelMult != that1.LevelMult {
		return false
	}
	if this.MaxLayer != that1.MaxLayer {
		return false
	}
	if this.Sequence != that1.Sequence {
		return false
	}
	if len(this.CountLevel) != len(that1.CountLevel) {
		return false
	}
	for i := range this.CountLevel {
		if this.CountLevel[i] != that1.CountLevel[i] {
			return false
		}
	}
	if this.Enterpoint != that1.Enterpoint {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *LinkMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&framework.LinkMap{")
	keysForNodes := make([]uint64, 0, len(this.Nodes))
	for k, _ := range this.Nodes {
		keysForNodes = append(keysForNodes, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForNodes)
	mapStringForNodes := "map[uint64]bool{"
	for _, k := range keysForNodes {
		mapStringForNodes += fmt.Sprintf("%#v: %#v,", k, this.Nodes[k])
	}
	mapStringForNodes += "}"
	if this.Nodes != nil {
		s = append(s, "Nodes: "+mapStringForNodes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LinkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&framework.LinkList{")
	s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&framework.Node{")
	s = append(s, "P: "+fmt.Sprintf("%#v", this.P)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	keysForFriends := make([]uint64, 0, len(this.Friends))
	for k, _ := range this.Friends {
		keysForFriends = append(keysForFriends, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFriends)
	mapStringForFriends := "map[uint64]*LinkList{"
	for _, k := range keysForFriends {
		mapStringForFriends += fmt.Sprintf("%#v: %#v,", k, this.Friends[k])
	}
	mapStringForFriends += "}"
	if this.Friends != nil {
		s = append(s, "Friends: "+mapStringForFriends+",\n")
	}
	keysForReverseFriends := make([]uint64, 0, len(this.ReverseFriends))
	for k, _ := range this.ReverseFriends {
		keysForReverseFriends = append(keysForReverseFriends, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForReverseFriends)
	mapStringForReverseFriends := "map[uint64]*LinkMap{"
	for _, k := range keysForReverseFriends {
		mapStringForReverseFriends += fmt.Sprintf("%#v: %#v,", k, this.ReverseFriends[k])
	}
	mapStringForReverseFriends += "}"
	if this.ReverseFriends != nil {
		s = append(s, "ReverseFriends: "+mapStringForReverseFriends+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Hnsw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&framework.Hnsw{")
	s = append(s, "M: "+fmt.Sprintf("%#v", this.M)+",\n")
	s = append(s, "M0: "+fmt.Sprintf("%#v", this.M0)+",\n")
	s = append(s, "EfConstruction: "+fmt.Sprintf("%#v", this.EfConstruction)+",\n")
	s = append(s, "DelaunayType: "+fmt.Sprintf("%#v", this.DelaunayType)+",\n")
	s = append(s, "LevelMult: "+fmt.Sprintf("%#v", this.LevelMult)+",\n")
	s = append(s, "MaxLayer: "+fmt.Sprintf("%#v", this.MaxLayer)+",\n")
	s = append(s, "Sequence: "+fmt.Sprintf("%#v", this.Sequence)+",\n")
	keysForCountLevel := make([]uint64, 0, len(this.CountLevel))
	for k, _ := range this.CountLevel {
		keysForCountLevel = append(keysForCountLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForCountLevel)
	mapStringForCountLevel := "map[uint64]uint64{"
	for _, k := range keysForCountLevel {
		mapStringForCountLevel += fmt.Sprintf("%#v: %#v,", k, this.CountLevel[k])
	}
	mapStringForCountLevel += "}"
	if this.CountLevel != nil {
		s = append(s, "CountLevel: "+mapStringForCountLevel+",\n")
	}
	s = append(s, "Enterpoint: "+fmt.Sprintf("%#v", this.Enterpoint)+",\n")
	keysForNodes := make([]uint64, 0, len(this.Nodes))
	for k, _ := range this.Nodes {
		keysForNodes = append(keysForNodes, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForNodes)
	mapStringForNodes := "map[uint64]*Node{"
	for _, k := range keysForNodes {
		mapStringForNodes += fmt.Sprintf("%#v: %#v,", k, this.Nodes[k])
	}
	mapStringForNodes += "}"
	if this.Nodes != nil {
		s = append(s, "Nodes: "+mapStringForNodes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHnsw(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LinkMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for k, _ := range m.Nodes {
			dAtA[i] = 0xa
			i++
			v := m.Nodes[k]
			mapSize := 1 + sovHnsw(uint64(k)) + 1 + 1
			i = encodeVarintHnsw(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHnsw(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *LinkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		dAtA2 := make([]byte, len(m.Nodes)*10)
		var j1 int
		for _, num := range m.Nodes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.P) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(len(m.P)*4))
		for _, num := range m.P {
			f3 := math.Float32bits(float32(num))
			dAtA[i] = uint8(f3)
			i++
			dAtA[i] = uint8(f3 >> 8)
			i++
			dAtA[i] = uint8(f3 >> 16)
			i++
			dAtA[i] = uint8(f3 >> 24)
			i++
		}
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Level))
	}
	if len(m.Friends) > 0 {
		for k, _ := range m.Friends {
			dAtA[i] = 0x1a
			i++
			v := m.Friends[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovHnsw(uint64(msgSize))
			}
			mapSize := 1 + sovHnsw(uint64(k)) + msgSize
			i = encodeVarintHnsw(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHnsw(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintHnsw(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	if len(m.ReverseFriends) > 0 {
		for k, _ := range m.ReverseFriends {
			dAtA[i] = 0x22
			i++
			v := m.ReverseFriends[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovHnsw(uint64(msgSize))
			}
			mapSize := 1 + sovHnsw(uint64(k)) + msgSize
			i = encodeVarintHnsw(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHnsw(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintHnsw(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if m.Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *Hnsw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hnsw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.M != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.M))
	}
	if m.M0 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.M0))
	}
	if m.EfConstruction != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.EfConstruction))
	}
	if m.DelaunayType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.DelaunayType))
	}
	if m.LevelMult != 0 {
		dAtA[i] = 0x29
		i++
		i = encodeFixed64Hnsw(dAtA, i, uint64(math.Float64bits(float64(m.LevelMult))))
	}
	if m.MaxLayer != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.MaxLayer))
	}
	if m.Sequence != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Sequence))
	}
	if len(m.CountLevel) > 0 {
		for k, _ := range m.CountLevel {
			dAtA[i] = 0x42
			i++
			v := m.CountLevel[k]
			mapSize := 1 + sovHnsw(uint64(k)) + 1 + sovHnsw(uint64(v))
			i = encodeVarintHnsw(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHnsw(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintHnsw(dAtA, i, uint64(v))
		}
	}
	if m.Enterpoint != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintHnsw(dAtA, i, uint64(m.Enterpoint))
	}
	if len(m.Nodes) > 0 {
		for k, _ := range m.Nodes {
			dAtA[i] = 0x52
			i++
			v := m.Nodes[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovHnsw(uint64(msgSize))
			}
			mapSize := 1 + sovHnsw(uint64(k)) + msgSize
			i = encodeVarintHnsw(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHnsw(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintHnsw(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func encodeFixed64Hnsw(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Hnsw(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHnsw(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LinkMap) Size() (n int) {
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for k, v := range m.Nodes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHnsw(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovHnsw(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LinkList) Size() (n int) {
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		l = 0
		for _, e := range m.Nodes {
			l += sovHnsw(uint64(e))
		}
		n += 1 + sovHnsw(uint64(l)) + l
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	if len(m.P) > 0 {
		n += 1 + sovHnsw(uint64(len(m.P)*4)) + len(m.P)*4
	}
	if m.Level != 0 {
		n += 1 + sovHnsw(uint64(m.Level))
	}
	if len(m.Friends) > 0 {
		for k, v := range m.Friends {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHnsw(uint64(l))
			}
			mapEntrySize := 1 + sovHnsw(uint64(k)) + l
			n += mapEntrySize + 1 + sovHnsw(uint64(mapEntrySize))
		}
	}
	if len(m.ReverseFriends) > 0 {
		for k, v := range m.ReverseFriends {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHnsw(uint64(l))
			}
			mapEntrySize := 1 + sovHnsw(uint64(k)) + l
			n += mapEntrySize + 1 + sovHnsw(uint64(mapEntrySize))
		}
	}
	if m.Id != 0 {
		n += 1 + sovHnsw(uint64(m.Id))
	}
	return n
}

func (m *Hnsw) Size() (n int) {
	var l int
	_ = l
	if m.M != 0 {
		n += 1 + sovHnsw(uint64(m.M))
	}
	if m.M0 != 0 {
		n += 1 + sovHnsw(uint64(m.M0))
	}
	if m.EfConstruction != 0 {
		n += 1 + sovHnsw(uint64(m.EfConstruction))
	}
	if m.DelaunayType != 0 {
		n += 1 + sovHnsw(uint64(m.DelaunayType))
	}
	if m.LevelMult != 0 {
		n += 9
	}
	if m.MaxLayer != 0 {
		n += 1 + sovHnsw(uint64(m.MaxLayer))
	}
	if m.Sequence != 0 {
		n += 1 + sovHnsw(uint64(m.Sequence))
	}
	if len(m.CountLevel) > 0 {
		for k, v := range m.CountLevel {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHnsw(uint64(k)) + 1 + sovHnsw(uint64(v))
			n += mapEntrySize + 1 + sovHnsw(uint64(mapEntrySize))
		}
	}
	if m.Enterpoint != 0 {
		n += 1 + sovHnsw(uint64(m.Enterpoint))
	}
	if len(m.Nodes) > 0 {
		for k, v := range m.Nodes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHnsw(uint64(l))
			}
			mapEntrySize := 1 + sovHnsw(uint64(k)) + l
			n += mapEntrySize + 1 + sovHnsw(uint64(mapEntrySize))
		}
	}
	return n
}

func sovHnsw(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHnsw(x uint64) (n int) {
	return sovHnsw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LinkMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHnsw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHnsw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nodes == nil {
				m.Nodes = make(map[uint64]bool)
			}
			var mapkey uint64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHnsw(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHnsw
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Nodes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHnsw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHnsw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHnsw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Nodes = append(m.Nodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHnsw
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Nodes = append(m.Nodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHnsw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHnsw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHnsw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				v2 := float32(math.Float32frombits(v))
				m.P = append(m.P, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHnsw
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					v2 := float32(math.Float32frombits(v))
					m.P = append(m.P, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHnsw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Friends == nil {
				m.Friends = make(map[uint64]*LinkList)
			}
			var mapkey uint64
			var mapvalue *LinkList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHnsw
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthHnsw
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LinkList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHnsw(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHnsw
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Friends[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReverseFriends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHnsw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReverseFriends == nil {
				m.ReverseFriends = make(map[uint64]*LinkMap)
			}
			var mapkey uint64
			var mapvalue *LinkMap
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHnsw
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthHnsw
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LinkMap{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHnsw(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHnsw
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReverseFriends[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHnsw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHnsw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hnsw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHnsw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hnsw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hnsw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			m.M = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.M |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field M0", wireType)
			}
			m.M0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.M0 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EfConstruction", wireType)
			}
			m.EfConstruction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EfConstruction |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelaunayType", wireType)
			}
			m.DelaunayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelaunayType |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelMult", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.LevelMult = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLayer", wireType)
			}
			m.MaxLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLayer |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHnsw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CountLevel == nil {
				m.CountLevel = make(map[uint64]uint64)
			}
			var mapkey uint64
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHnsw(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHnsw
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CountLevel[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enterpoint", wireType)
			}
			m.Enterpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enterpoint |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHnsw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nodes == nil {
				m.Nodes = make(map[uint64]*Node)
			}
			var mapkey uint64
			var mapvalue *Node
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHnsw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHnsw
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthHnsw
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Node{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHnsw(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHnsw
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Nodes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHnsw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHnsw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHnsw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHnsw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHnsw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHnsw
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHnsw
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHnsw(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHnsw = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHnsw   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("hnsw.proto", fileDescriptorHnsw) }

var fileDescriptorHnsw = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0xc5, 0x49, 0xba, 0xb6, 0x77, 0x55, 0x87, 0x3c, 0x1e, 0xac, 0x68, 0x84, 0xaa, 0x08, 0x54,
	0x1e, 0xc8, 0xaa, 0x4d, 0x42, 0x13, 0x12, 0x42, 0x62, 0x14, 0x51, 0xd1, 0xc0, 0x14, 0xe0, 0x03,
	0xd2, 0xd6, 0xed, 0xa2, 0x76, 0x76, 0x49, 0x9c, 0x76, 0xf9, 0x0b, 0x3e, 0x83, 0x4f, 0xe1, 0x91,
	0x4f, 0x80, 0xee, 0x81, 0x57, 0x3e, 0x01, 0xd9, 0x49, 0x57, 0x37, 0xab, 0xd4, 0x37, 0xdf, 0x7b,
	0xcf, 0x3d, 0xb9, 0x3e, 0xc7, 0x37, 0x00, 0x97, 0x2c, 0x5e, 0xb8, 0xb3, 0x88, 0x0b, 0x8e, 0xab,
	0xa3, 0x28, 0xb8, 0xa2, 0x0b, 0x1e, 0x4d, 0xec, 0xe7, 0xe3, 0x50, 0x5c, 0x26, 0x7d, 0x77, 0xc0,
	0xaf, 0x8e, 0xc7, 0x7c, 0xcc, 0x8f, 0x15, 0xa2, 0x9f, 0x8c, 0x54, 0xa4, 0x02, 0x75, 0xca, 0x3a,
	0x9b, 0xd7, 0x50, 0xee, 0x85, 0x6c, 0xe2, 0x05, 0x33, 0x7c, 0x0a, 0xa5, 0x8f, 0x7c, 0x48, 0x63,
	0x82, 0x1a, 0x66, 0x6b, 0xff, 0xe4, 0xa1, 0x7b, 0x4b, 0xea, 0xe6, 0x10, 0x57, 0xd5, 0x3b, 0x4c,
	0x44, 0xa9, 0x9f, 0x61, 0xed, 0x33, 0x80, 0x75, 0x12, 0xdf, 0x07, 0x73, 0x42, 0x53, 0x82, 0x1a,
	0xa8, 0x65, 0xf9, 0xf2, 0x88, 0x1f, 0x40, 0x69, 0x1e, 0x4c, 0x13, 0x4a, 0x8c, 0x06, 0x6a, 0x55,
	0xfc, 0x2c, 0x78, 0x69, 0x9c, 0xa1, 0x66, 0x03, 0x2a, 0x92, 0xb6, 0x17, 0xc6, 0x42, 0xa2, 0xd6,
	0x9f, 0xb6, 0x72, 0xee, 0xe6, 0x5f, 0x03, 0x2c, 0x79, 0xc2, 0x35, 0x40, 0x17, 0xaa, 0x64, 0xf8,
	0xe8, 0x42, 0x82, 0x7b, 0x74, 0x4e, 0xa7, 0x8a, 0xd2, 0xf2, 0xb3, 0x00, 0xbf, 0x80, 0xf2, 0xbb,
	0x28, 0xa4, 0x6c, 0x18, 0x13, 0x53, 0xcd, 0x7f, 0xa4, 0xcd, 0x2f, 0x59, 0xdc, 0xbc, 0x9c, 0x8d,
	0xbf, 0x02, 0xe3, 0x0f, 0x50, 0xf7, 0xe9, 0x9c, 0x46, 0x31, 0x5d, 0xb5, 0x5b, 0xaa, 0xfd, 0x71,
	0xb1, 0x7d, 0x13, 0x95, 0xb1, 0x14, 0x5a, 0x71, 0x1d, 0x8c, 0xee, 0x90, 0x94, 0xd4, 0x5c, 0x46,
	0x77, 0x68, 0x7f, 0x82, 0x9a, 0x8e, 0xdf, 0xa2, 0xcf, 0x33, 0x5d, 0x9f, 0xfd, 0x93, 0xc3, 0x82,
	0xe8, 0x52, 0x1d, 0x4d, 0x34, 0xfb, 0x2b, 0x1c, 0x6e, 0x99, 0x63, 0x0b, 0x6f, 0x6b, 0x93, 0x17,
	0xdf, 0x35, 0x53, 0xf7, 0xe2, 0xc6, 0x04, 0xeb, 0x3d, 0x8b, 0x17, 0x52, 0x69, 0x2f, 0xa7, 0x41,
	0x9e, 0xbc, 0x8e, 0xd7, 0xce, 0x65, 0x36, 0xbc, 0x36, 0x7e, 0x0a, 0xf5, 0xce, 0xe8, 0x9c, 0xb3,
	0x58, 0x44, 0xc9, 0x40, 0x84, 0x9c, 0x11, 0x53, 0xd5, 0x0a, 0x59, 0xdc, 0x84, 0xda, 0x5b, 0x3a,
	0x0d, 0x12, 0x16, 0xa4, 0x5f, 0xd2, 0x19, 0x25, 0x96, 0x42, 0x6d, 0xe4, 0xf0, 0x11, 0x54, 0x95,
	0x71, 0x5e, 0x32, 0x15, 0x4a, 0x31, 0xe4, 0xaf, 0x13, 0xd8, 0x86, 0x8a, 0x17, 0x5c, 0xf7, 0x82,
	0x94, 0x46, 0x64, 0x4f, 0x75, 0xdf, 0xc6, 0xb2, 0xf6, 0x99, 0x7e, 0x4b, 0x28, 0x1b, 0x50, 0x52,
	0xce, 0x6a, 0xab, 0x18, 0xbf, 0x06, 0x38, 0xe7, 0x09, 0x13, 0xd9, 0x03, 0xa9, 0x28, 0x27, 0x1f,
	0x69, 0x77, 0x97, 0x97, 0x74, 0xd7, 0x88, 0xcc, 0x45, 0xad, 0x05, 0x3b, 0x00, 0x1d, 0x26, 0x68,
	0x34, 0xe3, 0x21, 0x13, 0xa4, 0xaa, 0xe8, 0xb5, 0x0c, 0x6e, 0xaf, 0x5e, 0x2a, 0x28, 0x6e, 0xbb,
	0xc8, 0x7d, 0x77, 0x43, 0x5e, 0xc1, 0x41, 0xe1, 0x83, 0xbb, 0xd6, 0xc4, 0xd2, 0x1d, 0xef, 0xee,
	0x58, 0xb0, 0x27, 0x9b, 0x46, 0x1f, 0x14, 0x9e, 0xad, 0x46, 0xf5, 0x86, 0xfc, 0xfb, 0xe3, 0xa0,
	0x1f, 0x4b, 0x07, 0xfd, 0x5c, 0x3a, 0xe8, 0xd7, 0xd2, 0x41, 0xbf, 0x97, 0x0e, 0xfa, 0x7e, 0xe3,
	0xdc, 0xeb, 0xef, 0xa9, 0x9f, 0xc1, 0xe9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0x45, 0x19,
	0xde, 0x54, 0x04, 0x00, 0x00,
}
